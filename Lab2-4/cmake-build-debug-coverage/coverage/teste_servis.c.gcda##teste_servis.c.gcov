        -:    0:Source:/mnt/c/Users/Mihai/Downloads/Lab2-4 (2)/Lab2-4/Lab2-4/Teste/teste_servis.c
        -:    0:Graph:/mnt/c/Users/Mihai/Downloads/Lab2-4 (2)/Lab2-4/Lab2-4/cmake-build-debug-coverage/CMakeFiles/Lab2_4.dir/Teste/teste_servis.c.gcno
        -:    0:Data:/mnt/c/Users/Mihai/Downloads/Lab2-4 (2)/Lab2-4/Lab2-4/cmake-build-debug-coverage/CMakeFiles/Lab2_4.dir/Teste/teste_servis.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kissk on 3/19/2025.
        -:    3://
        -:    4:#include "teste_servis.h"
function runServiceTests called 1 returned 100% blocks executed 75%
        1:    5:void runServiceTests() {
        1:    6:    Service *service = createService();
        1:    6-block  0
call    0 returned 1
        1:    7:    undo(service);
call    0 returned 1
        1:    8:    List* l=service->repo->elements;
        1:    9:    Tranzactie* tranzactie=createTranzactie(12,100,"Intrare","Paris");
call    0 returned 1
       1*:   10:    assert(service_adaugaTranzactie(service, tranzactie)==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   10-block  0
call    3 never executed
       1*:   11:    assert(l->lungime == 1);
        1:   11-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   11-block  1
call    2 never executed
        1:   12:    strcpy(tranzactie->tip, "Inte");
       1*:   13:    assert(service_adaugaTranzactie(service, tranzactie)==3);
        1:   13-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   13-block  1
call    3 never executed
        1:   14:    strcpy(tranzactie->tip, "Intrare");
        1:   15:    Tranzactie* new_tranzactie=createTranzactie(13,200,"Iesire","Paris");
        1:   15-block  0
call    0 returned 1
       1*:   16:    assert(service_modificaTranzactie(service,0, new_tranzactie)==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   16-block  0
call    3 never executed
        1:   17:    Tranzactie* tranzac=get(l,0);
        1:   17-block  0
call    0 returned 1
       1*:   18:    assert(tranzac->suma == 200.0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  0
call    2 never executed
       1*:   19:    assert(service_stergeTranzactie(service,0)==0);
        1:   19-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   19-block  1
call    3 never executed
       1*:   20:    assert(l->lungime == 0);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
        -:   21:
        -:   22:
        1:   23:    List *listaFiltrata = createList(destroyTranzactie,copyTranzactie);
        1:   23-block  0
call    0 returned 1
        1:   24:    filtrate(service, "Intrare", listaFiltrata);
call    0 returned 1
       1*:   25:    assert(listaFiltrata->lungime == 0); // No "Intrare" transactions after deletion
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   25-block  0
call    2 never executed
        1:   26:    destroyList(listaFiltrata);
        1:   26-block  0
call    0 returned 1
        -:   27:
        1:   28:    Tranzactie* t1=createTranzactie(15,150.0,"Intrare","Test1");
call    0 returned 1
        1:   29:    Tranzactie* t2=createTranzactie(10,100.0,"Intrare","Test2");
call    0 returned 1
        1:   30:    Tranzactie* t3=createTranzactie(20,200.0,"Intrare","Test3");
call    0 returned 1
        1:   31:    service_adaugaTranzactie(service, t1);
call    0 returned 1
        1:   32:    service_adaugaTranzactie(service, t2);
call    0 returned 1
        1:   33:    service_adaugaTranzactie(service, t3);
call    0 returned 1
        1:   34:    sortare(service);
call    0 returned 1
        1:   35:    Tranzactie* tes1=get(l,0);
call    0 returned 1
        1:   36:    Tranzactie* tes2=get(l,1);
call    0 returned 1
        1:   37:    Tranzactie* tes3=get(l,2);
call    0 returned 1
       1*:   38:    assert(tes1->ziua == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  0
call    2 never executed
       1*:   39:    assert(tes2->ziua == 15);
        1:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   39-block  1
call    2 never executed
       1*:   40:    assert(tes3->ziua == 20);
        1:   40-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   40-block  1
call    2 never executed
        1:   41:    List* listaFiltrata1 = createList(destroyTranzactie,copyTranzactie);
        1:   41-block  0
call    0 returned 1
        1:   42:    filtrate(service, "Intrare", listaFiltrata1);
call    0 returned 1
       1*:   43:    assert(listaFiltrata1->lungime == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   43-block  0
call    2 never executed
        1:   44:    tes1=get(l,1);
        1:   44-block  0
call    0 returned 1
       1*:   45:    assert(tes1->ziua == 15);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   45-block  0
call    2 never executed
        1:   46:    destroyList(listaFiltrata1);
        1:   46-block  0
call    0 returned 1
        1:   47:    List* listaFiltrata2 = createList(destroyTranzactie,copyTranzactie);
call    0 returned 1
        1:   48:    filtrate_new(service, 15,listaFiltrata2);
call    0 returned 1
        1:   49:    Tranzactie* filtest=get(listaFiltrata2,0);
call    0 returned 1
       1*:   50:    assert(filtest->ziua == 15);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  0
call    2 never executed
       1*:   51:    assert(listaFiltrata2->lungime==1);
        1:   51-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   51-block  1
call    2 never executed
        -:   52:    // Test undo
        1:   53:    undo(service);
        1:   53-block  0
call    0 returned 1
        1:   54:    l=service->repo->elements;
       1*:   55:    assert(l->lungime == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   55-block  0
call    2 never executed
        1:   56:    undo(service);
        1:   56-block  0
call    0 returned 1
        1:   57:    l=service->repo->elements;
       1*:   58:    assert(l->lungime == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  0
call    2 never executed
        1:   59:    undo(service);
        1:   59-block  0
call    0 returned 1
        -:   60:
        1:   61:    destroyService(service);
call    0 returned 1
        1:   62:    destroyList(listaFiltrata2);
call    0 returned 1
        1:   63:}
